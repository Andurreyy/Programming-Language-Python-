class Token:
    INTEGER, PLUS, MINUS, MUL, DIV, EOF = 'INTEGER', 'PLUS', 'MINUS', 'MUL', 'DIV', 'EOF'

    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __repr__(self):
        return f"Token({self.type}, {repr(self.value)})"

class Interpreter:
    def __init__(self, text):
        self.text = text.replace(" ", "")  # Remove spaces
        self.pos = 0
        self.current_token = None

    def error(self):
        raise Exception("Invalid syntax")

    def get_next_token(self):
        if self.pos >= len(self.text):
            return Token(Token.EOF, None)

        current_char = self.text[self.pos]

        if current_char.isdigit():
            num = ''
            while self.pos < len(self.text) and self.text[self.pos].isdigit():
                num += self.text[self.pos]
                self.pos += 1
            return Token(Token.INTEGER, int(num))

        if current_char == '+':
            self.pos += 1
            return Token(Token.PLUS, '+')
        if current_char == '-':
            self.pos += 1
            return Token(Token.MINUS, '-')
        if current_char == '*':
            self.pos += 1
            return Token(Token.MUL, '*')
        if current_char == '/':
            self.pos += 1
            return Token(Token.DIV, '/')

        self.error()

    def eat(self, token_type):
        if self.current_token.type == token_type:
            self.current_token = self.get_next_token()
        else:
            self.error()

    def expr(self):
        self.current_token = self.get_next_token()
        result = self.current_token.value
        self.eat(Token.INTEGER)

        while self.current_token.type in (Token.PLUS, Token.MINUS, Token.MUL, Token.DIV):
            op = self.current_token
            if op.type == Token.PLUS:
                self.eat(Token.PLUS)
                result += self.current_token.value
            elif op.type == Token.MINUS:
                self.eat(Token.MINUS)
                result -= self.current_token.value
            elif op.type == Token.MUL:
                self.eat(Token.MUL)
                result *= self.current_token.value
            elif op.type == Token.DIV:
                self.eat(Token.DIV)
                result = float(result) / self.current_token.value  # Ensure float division
            self.eat(Token.INTEGER)
        
        return result

if __name__ == "__main__":
    while True:
        try:
            text = input("calc> ")
            if text.lower() in ('exit', 'quit'):
                break
            interpreter = Interpreter(text)
            result = interpreter.expr()
            print(result)
        except Exception as e:
            print(e)

